#!/bin/bash

# Initialize variables
APP=""
DATE=""
WRAPPER=""
PLAN=""
VERSION=""
PROJECT="dev"
STAGING_AREA="/boincdata/boinc/staging_area"
DEPLOYMENT_AREA="/boincdata/boinc/project"
TODAY=$(date +"%Y_%m_%d")

# Function to display usage information
usage() {
    echo "Usage: $0 [--app APP_NAME] [--date DATE] [--wrapper WRAPPER_NAME] [--prod]"
    echo "  --app      Specify the name of the application"
    echo "  --date     Specify the date to use as a template"
    echo "  --wrapper  Specify the name of the wrapper script"
    echo "  --prod     Flag indicating production environment"
    echo "  --version  Version number of the release"
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --app)
            APP="$2"
            shift
            shift
            ;;
        --date)
            DATE="$2"
            shift
            shift
            ;;
        --wrapper)
            WRAPPER="$2"
            shift
            shift
            ;;
        --prod)
            PROJECT="prod"
            shift
            ;;
        --version)
            VERSION="$2"
            shift
	    shift
            ;;
        *)
            echo "Error: Unknown arg ${key}."
            usage
            ;;
    esac
done

# Check if required arguments are provided
if [ -z "$APP" ] ; then
    echo "Error: Please specify an application."
    usage 
    exit 1
else
    case "$APP" in
        "CMS")
	    PLAN="vbox64_mt_mcore_cms"
	    ;;
	"Theory")
	    PLAN="vbox64_theory"
            ;;
        *)
            echo "Error: Valid apps are CMS and Theory."
	    exit 1
            ;;
    esac
fi

# Check if required arguments are provided
if [ -z "$DATE" ] ; then
    echo "Error: Please specify a date to clone."
    usage
    exit 1
else
    regex='^[0-9]{4}_[0-9]{2}_[0-9]{2}$'
    if [[ ! $DATE =~ $regex ]]; then
        echo "Error: Date must be in the format YYYY-MM-DD"
#	exit 1
    fi
fi

# Check if required arguments are provided
if [ -z "$WRAPPER" ] ; then
    echo "Error: Please specify a vboxwrapper version."
    usage 
    exit 1
else
    regex='^[0-9]{5}$'
    if [[ ! $WRAPPER =~ $regex ]]; then
        echo "Error: Version must be in the format \d\d\d\d\d."
	#exit 1
    fi
fi

# Check if required arguments are provided
if [ -z "$VERSION" ] ; then
    echo "Error: Please specify an app version."
    usage 
    exit 1
else
    regex='^[0-9]{1,3}.[0-9]{1,2}$'
    if [[ ! $VERSION =~ $regex ]]; then
        echo "Error: Version must be in the format \d\d.\d\d."
	exit 1
    fi
fi

SOURCE_IMAGE="${STAGING_AREA}/images/${APP}_${DATE}_${PROJECT}.vdi" 

# Check if source file exists
if [ ! -f "${SOURCE_IMAGE}" ]; then
    echo "Error: Source file ${SOURCE_IMAGE} does not exist."
    exit 1
fi

DEST_IMAGE="${STAGING_AREA}/images/${APP}_${TODAY}_${PROJECT}.vdi"

if [ -f "${DEST_IMAGE}" ]; then
    echo "Warning: Not cloning image as ${DEST_IMAGE} already exists."
else
    VBoxManage clonemedium "${SOURCE_IMAGE}" "${DEST_IMAGE}"
fi

if [ $? -ne 0 ]; then
    echo "Error: Cloning image failed."
    exit 1
fi

chown lhcathom:boinc "${DEST_IMAGE}"
chmod 644 "${DEST_IMAGE}"

SOURCE_XML="https://gitlab.cern.ch/vc/apps/-/raw/master/${APP}/vbox/${APP}.xml"
DEST_XML="${STAGING_AREA}/jobs/${APP}_${TODAY}_${PROJECT}.xml" 

wget -q "${SOURCE_XML}" -O "${DEST_XML}"
sed -i "s/${APP}.vdi/${APP}_${TODAY}_${PROJECT}.vdi/" "${DEST_XML}"
chown lhcathom:boinc "${DEST_XML}"
chmod 644 "${DEST_XML}"

# Check if vboxwraper exists
suffixes="windows_x86_64.exe x86_64-apple-darwin x86_64-pc-linux-gnu"
suffixes="x86_64-apple-darwin"
for suffix in ${suffixes}; do
    if [ ! -f "${STAGING_AREA}/vboxwrappers/vboxwrapper_${WRAPPER}_${suffix}" ]; then
    echo "Error: Vboxwrapper ${STAGING_AREA}/vboxwrappers/vboxwrapper_${WRAPPER}_${suffix} does not exist."
    exit 1
    fi
done

if [ ${PROJECT} == "prod" ]; then 
    NAME=lhcathome
else
    NAME=lhcathome-dev
fi

APP_LOCATION=${DEPLOYMENT_AREA}/${NAME}/apps/${APP}/${VERSION}

#Make new version
mkdir -p ${APP_LOCATION}
cat <<EOF > ${APP_LOCATION}/version.xml
<version>
  <file>
    <physical_name>vboxwrapper_</physical_name>
    <main_program/>
    <copy_file/>
  </file>
  <file>
    <physical_name>$(basename ${DEST_XML})</physical_name>
    <logical_name>vbox_job.xml</logical_name>
    <copy_file/>
  </file>
  <file>
    <physical_name>$(basename ${DEST_IMAGE})</physical_name>
    <gzip/>
    <sticky/> 
  </file>
  <dont_throttle/>
  <enable_network/>
  <needs_network/> 
</version>
EOF

SUB="${APP_LOCATION}/windows_x86_64__${PLAN}"
mkdir -p ${SUB}
ln -sf ${DEST_IMAGE} ${SUB}/.
ln -sf ${DEST_XML} ${SUB}/.
ln -sf ${STAGING_AREA}/vboxwrappers/vboxwrapper_${WRAPPER}_windows_x86_64.exe ${SUB}/.
sed "s/vboxwrapper_/vboxwrapper_${WRAPPER}_windows_x86_64.exe/" ${APP_LOCATION}/version.xml > ${SUB}/version.xml

SUB="${APP_LOCATION}/x86_64-pc-linux-gnu__${PLAN}"
mkdir -p ${SUB}
ln -sf ${DEST_IMAGE} ${SUB}/.
ln -sf ${DEST_XML} ${SUB}/.
ln -sf ${STAGING_AREA}/vboxwrappers/vboxwrapper_${WRAPPER}_x86_64-pc-linux-gnu ${SUB}/.
sed "s/vboxwrapper_/vboxwrapper_${WRAPPER}_x86_64-pc-linux-gnu/" ${APP_LOCATION}/version.xml > ${SUB}/version.xml

SUB="${APP_LOCATION}/x86_64-apple-darwin__${PLAN}"
mkdir -p ${SUB}
ln -sf ${DEST_IMAGE} ${SUB}/.
ln -sf ${DEST_XML} ${SUB}/.
ln -sf ${STAGING_AREA}/vboxwrappers/vboxwrapper_${WRAPPER}_x86_64-apple-darwin ${SUB}/.
sed "s/vboxwrapper_/vboxwrapper_${WRAPPER}_x86_64-apple-darwin/" ${APP_LOCATION}/version.xml > ${SUB}/version.xml

rm -f ${APP_LOCATION}/version.xml
echo ${APP_LOCATION}
